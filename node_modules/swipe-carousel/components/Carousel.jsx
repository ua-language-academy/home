'use strict';

var CarouselCard = require('./CarouselCard');
var React = require('react');
var Swipeable = require('./Swipeable');
var getViewportSize = require('../utils/viewport.js');

React.initializeTouchEvents(true);

var Carousel = React.createClass({

  propTypes: {
    children: React.PropTypes.node
  },

  getInitialState: function () {
    return {
      prevIndex: 0,
      currentIndex: 0,
      itemStart: [],
      cardsInView: 0,
      canceled: false,
      delta: 0
    };
  },

  componentDidMount: function () {

    var carouselContainer = this.refs.carouselContainer.getDOMNode();

    // all the same size
    var cardCount = carouselContainer.children.length;
    var cardWidth = cardCount > 0 ? carouselContainer.children[0].offsetWidth : 0;
    var offsetWidth = carouselContainer.offsetWidth;

    this.updateOffset(cardCount, cardWidth, offsetWidth);

  },

  getCurrentOffset: function () {
    var currentIndexOffset = this.state.itemStart[this.state.currentIndex];

    return  currentIndexOffset || 0;
  },

  getCurrentDelta: function () {
    return this.state.delta + (0 - this.getCurrentOffset());
  },

  getStyleObj: function () {
    return  {
      WebkitTransform: 'translate3d(' + this.getCurrentDelta() + 'px, 0, 0)',
      transition: 'all 250ms ease-out'
    };
  },

  render: function () {

    var scrollClasses = getViewportSize().width < 768 ? this.getStyleObj() : null;

    return (
      <div className="scrollArea-horizontal">
        <Swipeable
          className="scrollArea-container"
          onSwiped={this.doMoveImage}
          onSwipingLeft={this.swingRight}
          onSwipingRight={this.swingLeft}
          ref="carouselContainer"
          style={scrollClasses}
        >

          {this.props.children.map(function (item, i) {
            return (
              <CarouselCard key={i}>
                {item}
              </CarouselCard>
            );
          })}

        </Swipeable>
      </div>
    );
  },

  addResistance: function (delta) {
    return delta * (1 - parseInt(Math.sqrt(Math.pow(delta, 2)), 10) / 1000);
  },

  resetState: function (index, imageMoveIndex) {
    this.setState({
      prevIndex: imageMoveIndex,
      currentIndex: index,
      canceled: false,
      delta: 0
    });
  },

  doMoveImage: function (ev, x, y) {

    var index = this.state.currentIndex;
    var imageMoveIndex = this.state.currentIndex;

    if (Math.abs(y) > Math.abs(x)) {
      return this.resetState(index, imageMoveIndex);
    }

    if (this.state.canceled) {
      return this.resetState(index, imageMoveIndex);
    }

    if (x < 0) {
      if (index > 0) {
        index = index - 1;
        imageMoveIndex = index;
      }
    } else if (x > 0) {
      // if moving from left to right the index is less than the total
      // and the total cards in view at the end do not exceed the length
      if (index < this.props.children.length - 1
        && (this.state.cardsInView + index) < this.props.children.length) {
        index = index + 1;
        imageMoveIndex = imageMoveIndex;
      }
    }
    return this.resetState(index, imageMoveIndex);
  },

  swingLeft: function (e, delta) {
    this.setState({
      delta: this.addResistance(delta),
      canceled: this.state.canceled || Math.abs(delta) < Math.abs(this.state.delta)
    });
  },

  swingRight: function (e, delta) {
    this.setState({
      delta: 0 - this.addResistance(delta),
      canceled: this.state.canceled || Math.abs(delta) < Math.abs(this.state.delta)
    });
  },

  updateOffset: function (cardCount, cardWidth, offsetWidth) {

    var cardPositions = [];

    for (var i = 0; i < cardCount; i++) {
      cardPositions.push(cardWidth * i);
    }

    // cards in view screen
    var cardsInView = parseInt(offsetWidth / cardWidth, 10);

    this.setState({
      itemStart: cardPositions,
      cardsInView: cardsInView
    });

  }

});

module.exports = Carousel;
